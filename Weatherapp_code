#include <Arduino.h>
#include <esp_task_wdt.h>
#include "freertos/FreeRTOS.h"
#include "freertos/task.h"
#include "esp_adc_cal.h"
#include <SPI.h>
#include "pin_config.h"
#include <WiFi.h>
#include <HTTPClient.h>
#include <ArduinoJson.h>
#include <TFT_eSPI.h>
#include <time.h>
#include <Preferences.h>

String ssid = "";
String password = "";

TFT_eSPI tft = TFT_eSPI();
#define DISPLAY_WIDTH 320
#define DISPLAY_HEIGHT 170

WiFiClient wifi_client;
#define BUTTON_DEBOUNCE_DELAY 200
unsigned long lastButton1Press = 0;
unsigned long lastButton2Press = 0;
unsigned long bothButtonsPressedStart = 0;
bool bothButtonsHeld = false;

enum ScreenState { BOOT, MENU, FORECAST, HISTORICAL, SETTINGS, CITY_SELECT };
ScreenState currentScreen = BOOT;
int menuIndex = 0;
const int menuItemCount = 3;

// Stadstruktur och alternativ
struct City {
  String name;
  float lat;
  float lon;
  String stationId;
};

City cities[] = {
  {"Karlskrona", 56.2, 15.6, "65090"},
  {"Stockholm",  59.3, 18.1, "98230"},
  {"Goteborg",   57.7, 11.9, "71420"}
};

int currentCityIndex = 0;

Preferences preferences;

void showBootScreen();
void showMenu();
void showForecastScreen();
void showHistoricalScreen();
void showSettingsScreen();
void showCitySelectScreen();
void checkButtons();
void drawMenuWithHighlight(int index);
void showLoadingScreen(String text);

void setup() {
  Serial.begin(115200);
  tft.init();
  tft.setRotation(1);
  tft.fillScreen(TFT_BLACK);

  pinMode(PIN_BUTTON_1, INPUT_PULLUP);
  pinMode(PIN_BUTTON_2, INPUT_PULLUP);

  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(1000);
    tft.fillScreen(TFT_BLACK);
    tft.setTextColor(TFT_WHITE, TFT_BLACK);
    tft.drawString("Connecting to WiFi...", 10, 10);
  }

  configTime(0, 0, "pool.ntp.org", "time.nist.gov");
  while (time(nullptr) < 100000) {
    delay(100);
  }

  // LÃ¤s senast valda stad
  preferences.begin("weather", true);
  currentCityIndex = preferences.getInt("city", 0);
  preferences.end();

  tft.fillScreen(TFT_BLACK);
  tft.setTextColor(TFT_GREEN, TFT_BLACK);
  tft.drawString("Connected to WiFi", 10, 10);

  showBootScreen();
  delay(3000);
  currentScreen = MENU;
  showMenu();
}

void loop() {
  checkButtons();
  if (currentScreen == FORECAST) {
    showForecastScreen();
    delay(10000);
    currentScreen = MENU;
    showMenu();
  }
}

void checkButtons() {
  bool button1Pressed = digitalRead(PIN_BUTTON_1) == LOW;
  bool button2Pressed = digitalRead(PIN_BUTTON_2) == LOW;
  unsigned long now = millis();

  if (button1Pressed && button2Pressed) {
    if (!bothButtonsHeld) {
      bothButtonsPressedStart = now;
      bothButtonsHeld = true;
    }
    if (now - bothButtonsPressedStart > 1000) {
      currentScreen = MENU;
      menuIndex = 0;
      showMenu();
      bothButtonsHeld = false;
      delay(500);
    }
    return;
  } else {
    bothButtonsHeld = false;
  }

  if (button1Pressed && (now - lastButton1Press > BUTTON_DEBOUNCE_DELAY)) {
    lastButton1Press = now;
    if (currentScreen == MENU) {
      menuIndex = (menuIndex + 1) % menuItemCount;
      drawMenuWithHighlight(menuIndex);
    } else if (currentScreen == CITY_SELECT) {
      currentCityIndex = (currentCityIndex + 1) % 3;
      showCitySelectScreen();
    }
  }

  if (button2Pressed && (now - lastButton2Press > BUTTON_DEBOUNCE_DELAY)) {
    lastButton2Press = now;
    if (currentScreen == MENU) {
      showLoadingScreen("Loading...");
      switch (menuIndex) {
        case 0: currentScreen = FORECAST; break;
        case 1: currentScreen = HISTORICAL; showHistoricalScreen(); break;
        case 2: currentScreen = SETTINGS; showSettingsScreen(); break;
      }
    } else if (currentScreen == CITY_SELECT) {
      // SPARA vald stad direkt som default
      preferences.begin("weather", false);
      preferences.putInt("city", currentCityIndex);
      preferences.end();

      currentScreen = MENU;
      showMenu();
    }
  }
}

void showBootScreen() {
  tft.fillScreen(TFT_BLACK);
  tft.setTextColor(TFT_WHITE, TFT_BLACK);
  tft.setTextSize(2);
  tft.drawString("Weather Project", 40, 40);
  tft.drawString("Group 2", 100, 70);
  tft.drawString("v2.0", 130, 100);
}

void showMenu() {
  tft.fillScreen(TFT_BLACK);
  drawMenuWithHighlight(menuIndex);
}

void drawMenuWithHighlight(int index) {
  tft.fillScreen(TFT_BLACK);
  tft.setTextColor(TFT_YELLOW, TFT_BLACK);
  tft.setTextSize(2);
  tft.drawString("Main Menu", 90, 20);
  tft.setTextSize(1);
  tft.setTextColor(index == 0 ? TFT_WHITE : TFT_YELLOW, TFT_BLACK); tft.drawString("> Forecast", 40, 60);
  tft.setTextColor(index == 1 ? TFT_WHITE : TFT_YELLOW, TFT_BLACK); tft.drawString("> Historical", 40, 80);
  tft.setTextColor(index == 2 ? TFT_WHITE : TFT_YELLOW, TFT_BLACK); tft.drawString("> Settings", 40, 100);
  tft.setTextColor(TFT_YELLOW, TFT_BLACK);
  tft.drawString("Btn1=Next Btn2=Select", 20, 140);
}

void showLoadingScreen(String text) {
  tft.fillScreen(TFT_BLACK);
  tft.setTextColor(TFT_WHITE, TFT_BLACK);
  tft.setTextSize(2);
  tft.drawString(text, 100, 80);
  delay(300);
}

void showForecastScreen() {
  HTTPClient http;
  String url = "https://opendata-download-metanalys.smhi.se/api/category/mesan2g/version/1/geotype/point/lon/" +
               String(cities[currentCityIndex].lon, 1) + "/lat/" + String(cities[currentCityIndex].lat, 1) + "/data.json";
  http.begin(url);
  int code = http.GET();
  if (code == HTTP_CODE_OK) {
    DynamicJsonDocument doc(16384);
    deserializeJson(doc, http.getString());
    JsonObject forecast = doc["timeSeries"][0];
    JsonArray params = forecast["parameters"];

    float temperature = 0, wind = 0, humidity = 0;
    for (JsonObject item : params) {
      String name = item["name"];
      float val = item["values"][0];
      if (name == "t") temperature = val;
      else if (name == "ws") wind = val;
      else if (name == "r") humidity = val;
    }

    tft.fillScreen(TFT_BLACK);
    tft.setTextColor(TFT_WHITE, TFT_BLACK);
    tft.setTextSize(2);
    tft.setCursor(5, 5);
    tft.println("Forecast - " + cities[currentCityIndex].name);
    tft.printf("Temp: %.1f \xB0C\n", temperature);
    tft.printf("Wind: %.1f m/s\n", wind);
    tft.printf("Humidity: %.0f%%\n", humidity);
  }
  http.end();
}

void showHistoricalScreen() {
  tft.fillScreen(TFT_BLACK);
  tft.setTextColor(TFT_ORANGE, TFT_BLACK);
  tft.setTextSize(2);
  tft.drawString("Historical - " + cities[currentCityIndex].name, 10, 10);
  tft.setTextSize(1);

  HTTPClient http;
  String url = "https://opendata-download-metobs.smhi.se/api/version/1.0/parameter/1/station/" + cities[currentCityIndex].stationId + "/period/latest-day/data.json";
  http.begin(url);
  int code = http.GET();

  if (code == HTTP_CODE_OK) {
    DynamicJsonDocument doc(32768);
    deserializeJson(doc, http.getString());
    JsonArray values = doc["value"];

    time_t now = time(nullptr);
    now -= 86400;
    struct tm* ti_now = gmtime(&now);
    int latestYear = ti_now->tm_year + 1900;
    int latestMonth = ti_now->tm_mon + 1;
    int latestDay = ti_now->tm_mday;

    int y = 40;
    char header[32];
    sprintf(header, "Date: %04d-%02d-%02d", latestYear, latestMonth, latestDay);
    tft.drawString(header, 20, y);
    y += 15;

    for (JsonObject item : values) {
      time_t t = item["date"].as<long long>() / 1000;
      struct tm *ti = gmtime(&t);
      if (ti->tm_year + 1900 == latestYear &&
          ti->tm_mon + 1 == latestMonth &&
          ti->tm_mday == latestDay &&
          (ti->tm_hour == 0 || ti->tm_hour == 1 ||
           ti->tm_hour == 6 || ti->tm_hour == 7 ||
           ti->tm_hour == 12 || ti->tm_hour == 13 ||
           ti->tm_hour == 18 || ti->tm_hour == 19)) {

        float temp = item["value"];
        char timeStr[6];
        sprintf(timeStr, "%02d:%02d", ti->tm_hour, ti->tm_min);
        char line[32];
        sprintf(line, "%s - %.1f \xB0C", timeStr, temp);
        tft.drawString(line, 20, y);
        y += 12;
      }
    }
  } else {
    tft.drawString("HTTP Error", 40, 100);
  }
  http.end();
}

void showSettingsScreen() {
  tft.fillScreen(TFT_BLACK);
  tft.setTextColor(TFT_PINK, TFT_BLACK);
  tft.setTextSize(2);
  tft.drawString("Settings", 100, 20);
  tft.setTextSize(1);
  tft.drawString("1. Change City", 40, 60);
  tft.drawString("2. Change Parameter", 40, 80);
  tft.drawString("3. Reset Defaults", 40, 100);
  tft.drawString("Hold Btn2 to back", 40, 130);

  currentScreen = CITY_SELECT;
  showCitySelectScreen();
}

void showCitySelectScreen() {
  tft.fillScreen(TFT_BLACK);
  tft.setTextColor(TFT_CYAN, TFT_BLACK);
  tft.setTextSize(2);
  tft.drawString("Change City", 70, 20);
  tft.setTextSize(2);
  tft.drawString(cities[currentCityIndex].name, 100, 70);
  tft.setTextSize(1);
  tft.drawString("Btn1=Next Btn2=Select", 40, 130);
}

#if PIN_LCD_WR  != TFT_WR || \
    PIN_LCD_RD  != TFT_RD || \
    PIN_LCD_CS  != TFT_CS || \
    PIN_LCD_DC  != TFT_DC || \
    PIN_LCD_RES != TFT_RST || \
    PIN_LCD_D0  != TFT_D0 || \
    PIN_LCD_D1  != TFT_D1 || \
    PIN_LCD_D2  != TFT_D2 || \
    PIN_LCD_D3  != TFT_D3 || \
    PIN_LCD_D4  != TFT_D4 || \
    PIN_LCD_D5  != TFT_D5 || \
    PIN_LCD_D6  != TFT_D6 || \
    PIN_LCD_D7  != TFT_D7 || \
    PIN_LCD_BL  != TFT_BL || \
    TFT_BACKLIGHT_ON != HIGH || \
    170 != TFT_WIDTH || \
    320 != TFT_HEIGHT
#error  "Error! Please make sure <User_Setups/Setup206_LilyGo_T_Display_S3.h> is selected in <TFT_eSPI/User_Setup_Select.h>"
#endif

#if ESP_IDF_VERSION >= ESP_IDF_VERSION_VAL(5,0,0)
#error  "The current version is not supported for the time being, please use a version below Arduino ESP32 3.0"
#endif

